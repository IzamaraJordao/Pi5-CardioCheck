openapi: 3.0.0
info:
  title: Cardio Check API
  description: CRUD operations for users and patient data
  version: 1.0.0

paths:
  /users:
    get:
      summary: Get all users
      operationId: getUsers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get user information by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user information by ID
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete user by ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              example: { "message": "User deleted successfully" }

  /users_email:
    get:
      summary: Get user by email
      operationId: getUserByEmail
      parameters:
        - name: email
          in: query
          description: User email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              example: { "message": "User not found" }
        '400':
          description: Invalid request
          content:
            application/json:
              example: { "error": "Email parameter is required" }

  /login:
    post:
      summary: User login
      operationId: loginUser
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              example: { "message": "Login successful" }
        '401':
          description: Invalid email or password
          content:
            application/json:
              example: { "error": "Invalid email or password" }
        '400':
          description: Invalid request
          content:
            application/json:
              example: { "error": "Email and password are required" }
        '500':
          description: Internal Server Error
          content:
            application/json:
              example: { "error": "Internal Server Error" }

  /patients:
    post:
      summary: Add a new patient
      operationId: addPatient
      requestBody:
        description: Patient data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: Patient added successfully
          content:
            application/json:
              example: { "message": 1 }
        '400':
          description: Invalid request
          content:
            application/json:
              example: { "error": "Invalid request" }

    get:
      summary: Get all patients
      operationId: getPatients
      responses:
        '200':
          description: List of patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'

  /patients/{patient_id}:
    get:
      summary: Get patient information by ID
      operationId: getPatientById
      parameters:
        - name: patient_id
          in: path
          description: Patient ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Patient information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'

    put:
      summary: Update patient information by ID
      operationId: updatePatient
      parameters:
        - name: patient_id
          in: path
          description: Patient ID
          required: true
          schema:
            type: integer
      requestBody:
        description: Patient data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: Patient data updated successfully
          content:
            application/json:
              example: { "message": "Patient data updated successfully!" }

    delete:
      summary: Delete patient by ID
      operationId: deletePatient
      parameters:
        - name: patient_id
          in: path
          description: Patient ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Patient deleted successfully
          content:
            application/json:
              example: { "message": "Patient deleted successfully!" }

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        password:
          type: string

    Patient:
      type: object
      properties:
        id:
          type: integer
          format: int64
        age:
          type: integer
          format: int64
        sex:
          type: integer
          format: int64
        cp:
          type: integer
          format: int64
        trestbps:
          type: integer
          format: int64
        chol:
          type: integer
          format: int64
        fbs:
          type: integer
          format: int64
        restecg:
          type: integer
          format: int64
        thalach:
          type: integer
          format: int64
        exang:
          type: integer
          format: int64
        oldpeak:
          type: number
        slope:
          type: integer
          format: int64
        ca:
          type: integer
          format: int64
        thal:
          type: integer
          format: int64
        target:
          type: integer
          format: int64
